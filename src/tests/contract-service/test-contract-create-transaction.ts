import { assert, expect } from "chai";

import { JSONRPCRequest } from "@services/Client";
import mirrorNodeClient from "@services/MirrorNodeClient";
import consensusInfoClient from "@services/ConsensusInfoClient";

import { setOperator } from "@helpers/setup-tests";
import { retryOnError } from "@helpers/retry-on-error";

import { createAccount } from "@helpers/account";
import {
  generateEd25519PrivateKey,
  generateEd25519PublicKey,
  generateEcdsaSecp256k1PrivateKey,
  generateEcdsaSecp256k1PublicKey,
  generateKeyList,
} from "@helpers/key";
import {
  verifyContractKey,
  verifyContractKeyList,
  verifyContractUpdateWithNullKey,
} from "@helpers/verify-contract-tx";
import { invalidKey } from "@constants/key-type";

import { ErrorStatusCodes } from "@enums/error-status-codes";
import { ContractFunctionParameters } from "@hashgraph/sdk";

const smartContractBytecode =
  "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101cb806100606000396000f3fe608060405260043610610046576000357c01000000000000000000000000000000000000000000000000000000009004806341c0e1b51461004b578063cfae321714610062575b600080fd5b34801561005757600080fd5b506100606100f2565b005b34801561006e57600080fd5b50610077610162565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100b757808201518184015260208101905061009c565b50505050905090810190601f1680156100e45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610160573373ffffffffffffffffffffffffffffffffffffffff16ff5b565b60606040805190810160405280600d81526020017f48656c6c6f2c20776f726c64210000000000000000000000000000000000000081525090509056fea165627a7a72305820ae96fb3af7cde9c0abfe365272441894ab717f816f07f41f07b1cbede54e256e0029";

/**
 * Tests for ContractCreateTransaction
 */
describe.only("ContractCreateTransaction", function () {
  this.timeout(30000);

  beforeEach(async function () {
    await setOperator(
      this,
      process.env.OPERATOR_ACCOUNT_ID as string,
      process.env.OPERATOR_ACCOUNT_PRIVATE_KEY as string,
    );
  });

  afterEach(async function () {
    await JSONRPCRequest(this, "reset");
  });

  const toHexString = (byteArray: Uint8Array) => {
    return Array.from(byteArray, function (byte) {
      return ("0" + (byte & 0xff).toString(16)).slice(-2);
    }).join("");
  };

  describe("Bytecode File Id", function () {
    const gas = "300000";
    it("(#1) reate a contract with valid file containing bytecode", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: smartContractBytecode,
      });
      const fileId = fileResponse.fileId;

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas,
      });

      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#2) Create a contract with `bytecodeFileId` which contains incorrect `bytecode`(`0x60006000fe`)", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: "0x60006000fe",
      });
      const fileId = fileResponse.fileId;

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_EXECUTION_EXCEPTION",
          "Invalid bytecode error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#3) Create a contract with `bytecodeFileId` which does not exist", async function () {
      const fileId = "0.0.1234567890";

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_FILE_ID",
          "Invalid file id error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#4) Create a contract with a valid file ID but no content", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: "",
      });
      const fileId = fileResponse.fileId;

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_FILE_EMPTY",
          "Contract file empty error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#5) Create and deploy a valid ERC-20 contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const erc20Bytecode =
        "608060405234801561000f575f5ffd5b506040516115dc3803806115dc833981810160405281019061003191906103aa565b6040518060400160405280600481526020017f476f6c64000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f474c44000000000000000000000000000000000000000000000000000000000081525081600390816100ac9190610609565b5080600490816100bc9190610609565b5050506100cf33826100d560201b60201c565b506107ed565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610145575f6040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161013c9190610717565b60405180910390fd5b6101565f838361015a60201b60201c565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036101aa578060025f82825461019e919061075d565b92505081905550610278565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905081811015610233578381836040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161022a9392919061079f565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036102bf578060025f8282540392505081905550610309565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161036691906107d4565b60405180910390a3505050565b5f5ffd5b5f819050919050565b61038981610377565b8114610393575f5ffd5b50565b5f815190506103a481610380565b92915050565b5f602082840312156103bf576103be610373565b5b5f6103cc84828501610396565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061045057607f821691505b6020821081036104635761046261040c565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026104c57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261048a565b6104cf868361048a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61050a61050561050084610377565b6104e7565b610377565b9050919050565b5f819050919050565b610523836104f0565b61053761052f82610511565b848454610496565b825550505050565b5f5f905090565b61054e61053f565b61055981848461051a565b505050565b5b8181101561057c576105715f82610546565b60018101905061055f565b5050565b601f8211156105c15761059281610469565b61059b8461047b565b810160208510156105aa578190505b6105be6105b68561047b565b83018261055e565b50505b505050565b5f82821c905092915050565b5f6105e15f19846008026105c6565b1980831691505092915050565b5f6105f983836105d2565b9150826002028217905092915050565b610612826103d5565b67ffffffffffffffff81111561062b5761062a6103df565b5b6106358254610439565b610640828285610580565b5f60209050601f831160018114610671575f841561065f578287015190505b61066985826105ee565b8655506106d0565b601f19841661067f86610469565b5f5b828110156106a657848901518255600182019150602085019450602081019050610681565b868310156106c357848901516106bf601f8916826105d2565b8355505b6001600288020188555050505b505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610701826106d8565b9050919050565b610711816106f7565b82525050565b5f60208201905061072a5f830184610708565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61076782610377565b915061077283610377565b925082820190508082111561078a57610789610730565b5b92915050565b61079981610377565b82525050565b5f6060820190506107b25f830186610708565b6107bf6020830185610790565b6107cc6040830184610790565b949350505050565b5f6020820190506107e75f830184610790565b92915050565b610de2806107fa5f395ff3fe608060405234801561000f575f5ffd5b5060043610610091575f3560e01c8063313ce56711610064578063313ce5671461013157806370a082311461014f57806395d89b411461017f578063a9059cbb1461019d578063dd62ed3e146101cd57610091565b806306fdde0314610095578063095ea7b3146100b357806318160ddd146100e357806323b872dd14610101575b5f5ffd5b61009d6101fd565b6040516100aa9190610a5b565b60405180910390f35b6100cd60048036038101906100c89190610b0c565b61028d565b6040516100da9190610b64565b60405180910390f35b6100eb6102af565b6040516100f89190610b8c565b60405180910390f35b61011b60048036038101906101169190610ba5565b6102b8565b6040516101289190610b64565b60405180910390f35b6101396102e6565b6040516101469190610c10565b60405180910390f35b61016960048036038101906101649190610c29565b6102ee565b6040516101769190610b8c565b60405180910390f35b610187610333565b6040516101949190610a5b565b60405180910390f35b6101b760048036038101906101b29190610b0c565b6103c3565b6040516101c49190610b64565b60405180910390f35b6101e760048036038101906101e29190610c54565b6103e5565b6040516101f49190610b8c565b60405180910390f35b60606003805461020c90610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461023890610cbf565b80156102835780601f1061025a57610100808354040283529160200191610283565b820191905f5260205f20905b81548152906001019060200180831161026657829003601f168201915b5050505050905090565b5f5f610297610467565b90506102a481858561046e565b600191505092915050565b5f600254905090565b5f5f6102c2610467565b90506102cf858285610480565b6102da858585610513565b60019150509392505050565b5f6012905090565b5f5f5f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461034290610cbf565b80601f016020809104026020016040519081016040528092919081815260200182805461036e90610cbf565b80156103b95780601f10610390576101008083540402835291602001916103b9565b820191905f5260205f20905b81548152906001019060200180831161039c57829003601f168201915b5050505050905090565b5f5f6103cd610467565b90506103da818585610513565b600191505092915050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b61047b8383836001610603565b505050565b5f61048b84846103e5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81101561050d57818110156104fe578281836040517ffb8f41b20000000000000000000000000000000000000000000000000000000081526004016104f593929190610cfe565b60405180910390fd5b61050c84848484035f610603565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610583575f6040517f96c6fd1e00000000000000000000000000000000000000000000000000000000815260040161057a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105f3575f6040517fec442f050000000000000000000000000000000000000000000000000000000081526004016105ea9190610d33565b60405180910390fd5b6105fe8383836107d2565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603610673575f6040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161066a9190610d33565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106e3575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016106da9190610d33565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f208190555080156107cc578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516107c39190610b8c565b60405180910390a35b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610822578060025f8282546108169190610d79565b925050819055506108f0565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156108ab578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016108a293929190610cfe565b60405180910390fd5b8181035f5f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610937578060025f8282540392505081905550610981565b805f5f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516109de9190610b8c565b60405180910390a3505050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610a2d826109eb565b610a3781856109f5565b9350610a47818560208601610a05565b610a5081610a13565b840191505092915050565b5f6020820190508181035f830152610a738184610a23565b905092915050565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610aa882610a7f565b9050919050565b610ab881610a9e565b8114610ac2575f5ffd5b50565b5f81359050610ad381610aaf565b92915050565b5f819050919050565b610aeb81610ad9565b8114610af5575f5ffd5b50565b5f81359050610b0681610ae2565b92915050565b5f5f60408385031215610b2257610b21610a7b565b5b5f610b2f85828601610ac5565b9250506020610b4085828601610af8565b9150509250929050565b5f8115159050919050565b610b5e81610b4a565b82525050565b5f602082019050610b775f830184610b55565b92915050565b610b8681610ad9565b82525050565b5f602082019050610b9f5f830184610b7d565b92915050565b5f5f5f60608486031215610bbc57610bbb610a7b565b5b5f610bc986828701610ac5565b9350506020610bda86828701610ac5565b9250506040610beb86828701610af8565b9150509250925092565b5f60ff82169050919050565b610c0a81610bf5565b82525050565b5f602082019050610c235f830184610c01565b92915050565b5f60208284031215610c3e57610c3d610a7b565b5b5f610c4b84828501610ac5565b91505092915050565b5f5f60408385031215610c6a57610c69610a7b565b5b5f610c7785828601610ac5565b9250506020610c8885828601610ac5565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610cd657607f821691505b602082108103610ce957610ce8610c92565b5b50919050565b610cf881610a9e565b82525050565b5f606082019050610d115f830186610cef565b610d1e6020830185610b7d565b610d2b6040830184610b7d565b949350505050565b5f602082019050610d465f830184610cef565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d8382610ad9565b9150610d8e83610ad9565b9250828201905080821115610da657610da5610d4c565b5b9291505056fea26469706673582212203210f5624e6037bb3a7d2b8a4f84f21b119eb900c6a8b8ca15be637bc43c6fa664736f6c634300081e0033";

      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: erc20Bytecode.substring(0, 5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const appendResponse = await JSONRPCRequest(this, "appendFile", {
        keys: [fileCreateEd25519PublicKey],
        fileId,
        contents: erc20Bytecode.substring(5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(appendResponse.status).to.equal("SUCCESS");

      const constructorParameters = new ContractFunctionParameters()
        .addUint256(1)
        ._build();

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "1000000",
        constructorParameters: toHexString(constructorParameters),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#6) Create and deploy a valid ERC-721 contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const erc721Bytecode =
        "608060405234801561000f575f5ffd5b506040518060400160405280600881526020017f47616d654974656d0000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f49544d0000000000000000000000000000000000000000000000000000000000815250815f908161008a91906102df565b50806001908161009a91906102df565b5050506103ae565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061011d57607f821691505b6020821081036101305761012f6100d9565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026101927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610157565b61019c8683610157565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6101e06101db6101d6846101b4565b6101bd565b6101b4565b9050919050565b5f819050919050565b6101f9836101c6565b61020d610205826101e7565b848454610163565b825550505050565b5f5f905090565b610224610215565b61022f8184846101f0565b505050565b5b81811015610252576102475f8261021c565b600181019050610235565b5050565b601f8211156102975761026881610136565b61027184610148565b81016020851015610280578190505b61029461028c85610148565b830182610234565b50505b505050565b5f82821c905092915050565b5f6102b75f198460080261029c565b1980831691505092915050565b5f6102cf83836102a8565b9150826002028217905092915050565b6102e8826100a2565b67ffffffffffffffff811115610301576103006100ac565b5b61030b8254610106565b610316828285610256565b5f60209050601f831160018114610347575f8415610335578287015190505b61033f85826102c4565b8655506103a6565b601f19841661035586610136565b5f5b8281101561037c57848901518255600182019150602085019450602081019050610357565b868310156103995784890151610395601f8916826102a8565b8355505b6001600288020188555050505b505050505050565b612286806103bb5f395ff3fe608060405234801561000f575f5ffd5b50600436106100e8575f3560e01c806370a082311161008a578063b88d4fde11610064578063b88d4fde14610258578063c87b56dd14610274578063cf378343146102a4578063e985e9c5146102d4576100e8565b806370a08231146101ee57806395d89b411461021e578063a22cb4651461023c576100e8565b8063095ea7b3116100c6578063095ea7b31461016a57806323b872dd1461018657806342842e0e146101a25780636352211e146101be576100e8565b806301ffc9a7146100ec57806306fdde031461011c578063081812fc1461013a575b5f5ffd5b610106600480360381019061010191906117ca565b610304565b604051610113919061180f565b60405180910390f35b610124610364565b6040516101319190611898565b60405180910390f35b610154600480360381019061014f91906118eb565b6103f3565b6040516101619190611955565b60405180910390f35b610184600480360381019061017f9190611998565b61040e565b005b6101a0600480360381019061019b91906119d6565b610424565b005b6101bc60048036038101906101b791906119d6565b610523565b005b6101d860048036038101906101d391906118eb565b610542565b6040516101e59190611955565b60405180910390f35b61020860048036038101906102039190611a26565b610553565b6040516102159190611a60565b60405180910390f35b610226610609565b6040516102339190611898565b60405180910390f35b61025660048036038101906102519190611aa3565b610699565b005b610272600480360381019061026d9190611c0d565b6106af565b005b61028e600480360381019061028991906118eb565b6106d4565b60405161029b9190611898565b60405180910390f35b6102be60048036038101906102b99190611d2b565b6107df565b6040516102cb9190611a60565b60405180910390f35b6102ee60048036038101906102e99190611d85565b610815565b6040516102fb919061180f565b60405180910390f35b5f634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061035d575061035c826108a3565b5b9050919050565b60605f805461037290611df0565b80601f016020809104026020016040519081016040528092919081815260200182805461039e90611df0565b80156103e95780601f106103c0576101008083540402835291602001916103e9565b820191905f5260205f20905b8154815290600101906020018083116103cc57829003601f168201915b5050505050905090565b5f6103fd82610984565b5061040782610a0a565b9050919050565b610420828261041b610a43565b610a4a565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610494575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161048b9190611955565b60405180910390fd5b5f6104a783836104a2610a43565b610a5c565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461051d578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161051493929190611e20565b60405180910390fd5b50505050565b61053d83838360405180602001604052805f8152506106af565b505050565b5f61054c82610984565b9050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105c4575f6040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016105bb9190611955565b60405180910390fd5b60035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606001805461061890611df0565b80601f016020809104026020016040519081016040528092919081815260200182805461064490611df0565b801561068f5780601f106106665761010080835404028352916020019161068f565b820191905f5260205f20905b81548152906001019060200180831161067257829003601f168201915b5050505050905090565b6106ab6106a4610a43565b8383610c67565b5050565b6106ba848484610424565b6106ce6106c5610a43565b85858585610dd0565b50505050565b60606106df82610984565b505f60065f8481526020019081526020015f2080546106fd90611df0565b80601f016020809104026020016040519081016040528092919081815260200182805461072990611df0565b80156107745780601f1061074b57610100808354040283529160200191610774565b820191905f5260205f20905b81548152906001019060200180831161075757829003601f168201915b505050505090505f610784610f7c565b90505f8151036107985781925050506107da565b5f825111156107cc5780826040516020016107b4929190611e8f565b604051602081830303815290604052925050506107da565b6107d584610f92565b925050505b919050565b5f5f6107eb6007610ff8565b90506107f78482611004565b61080181846110f7565b61080b6007611151565b8091505092915050565b5f60055f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f7f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061096d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061097d575061097c82611165565b5b9050919050565b5f5f61098f836111ce565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a0157826040517f7e2732890000000000000000000000000000000000000000000000000000000081526004016109f89190611a60565b60405180910390fd5b80915050919050565b5f60045f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b5f33905090565b610a578383836001611207565b505050565b5f5f610a67846111ce565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610aa857610aa78184866113c6565b5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b3357610ae75f855f5f611207565b600160035f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825403925050819055505b5f73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610bb257600160035f8773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8460025f8681526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cd757816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610cce9190611955565b60405180910390fd5b8060055f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610dc3919061180f565b60405180910390a3505050565b5f8373ffffffffffffffffffffffffffffffffffffffff163b1115610f75578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401610e2e9493929190611f04565b6020604051808303815f875af1925050508015610e6957506040513d601f19601f82011682018060405250810190610e669190611f62565b60015b610eea573d805f8114610e97576040519150601f19603f3d011682016040523d82523d5f602084013e610e9c565b606091505b505f815103610ee257836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610ed99190611955565b60405180910390fd5b805160208201fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610f7357836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610f6a9190611955565b60405180910390fd5b505b5050505050565b606060405180602001604052805f815250905090565b6060610f9d82610984565b505f610fa7610f7c565b90505f815111610fc55760405180602001604052805f815250610ff0565b80610fcf84611489565b604051602001610fe0929190611e8f565b6040516020818303038152906040525b915050919050565b5f815f01549050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611074575f6040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161106b9190611955565b60405180910390fd5b5f61108083835f610a5c565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110f2575f6040517f73c6ac6e0000000000000000000000000000000000000000000000000000000081526004016110e99190611955565b60405180910390fd5b505050565b8060065f8481526020019081526020015f209081611115919061212d565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7826040516111459190611a60565b60405180910390a15050565b6001815f015f828254019250508190555050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b5f60025f8381526020019081526020015f205f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061123f57505f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611371575f61124e84610984565b90505f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156112b857508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156112cb57506112c98184610815565b155b1561130d57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016113049190611955565b60405180910390fd5b811561136f57838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8360045f8581526020019081526020015f205f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6113d1838383611553565b611484575f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361144557806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161143c9190611a60565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040161147b9291906121fc565b60405180910390fd5b505050565b60605f600161149784611613565b0190505f8167ffffffffffffffff8111156114b5576114b4611ae9565b5b6040519080825280601f01601f1916602001820160405280156114e75781602001600182028036833780820191505090505b5090505f82602083010190505b600115611548578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161153d5761153c612223565b5b0494505f85036114f4575b819350505050919050565b5f5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561160a57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806115cb57506115ca8484610815565b5b8061160957508273ffffffffffffffffffffffffffffffffffffffff166115f183610a0a565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b5f5f5f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061166f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161166557611664612223565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106116ac576d04ee2d6d415b85acef810000000083816116a2576116a1612223565b5b0492506020810190505b662386f26fc1000083106116db57662386f26fc1000083816116d1576116d0612223565b5b0492506010810190505b6305f5e1008310611704576305f5e10083816116fa576116f9612223565b5b0492506008810190505b612710831061172957612710838161171f5761171e612223565b5b0492506004810190505b6064831061174c576064838161174257611741612223565b5b0492506002810190505b600a831061175b576001810190505b80915050919050565b5f604051905090565b5f5ffd5b5f5ffd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6117a981611775565b81146117b3575f5ffd5b50565b5f813590506117c4816117a0565b92915050565b5f602082840312156117df576117de61176d565b5b5f6117ec848285016117b6565b91505092915050565b5f8115159050919050565b611809816117f5565b82525050565b5f6020820190506118225f830184611800565b92915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f61186a82611828565b6118748185611832565b9350611884818560208601611842565b61188d81611850565b840191505092915050565b5f6020820190508181035f8301526118b08184611860565b905092915050565b5f819050919050565b6118ca816118b8565b81146118d4575f5ffd5b50565b5f813590506118e5816118c1565b92915050565b5f60208284031215611900576118ff61176d565b5b5f61190d848285016118d7565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61193f82611916565b9050919050565b61194f81611935565b82525050565b5f6020820190506119685f830184611946565b92915050565b61197781611935565b8114611981575f5ffd5b50565b5f813590506119928161196e565b92915050565b5f5f604083850312156119ae576119ad61176d565b5b5f6119bb85828601611984565b92505060206119cc858286016118d7565b9150509250929050565b5f5f5f606084860312156119ed576119ec61176d565b5b5f6119fa86828701611984565b9350506020611a0b86828701611984565b9250506040611a1c868287016118d7565b9150509250925092565b5f60208284031215611a3b57611a3a61176d565b5b5f611a4884828501611984565b91505092915050565b611a5a816118b8565b82525050565b5f602082019050611a735f830184611a51565b92915050565b611a82816117f5565b8114611a8c575f5ffd5b50565b5f81359050611a9d81611a79565b92915050565b5f5f60408385031215611ab957611ab861176d565b5b5f611ac685828601611984565b9250506020611ad785828601611a8f565b9150509250929050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b611b1f82611850565b810181811067ffffffffffffffff82111715611b3e57611b3d611ae9565b5b80604052505050565b5f611b50611764565b9050611b5c8282611b16565b919050565b5f67ffffffffffffffff821115611b7b57611b7a611ae9565b5b611b8482611850565b9050602081019050919050565b828183375f83830152505050565b5f611bb1611bac84611b61565b611b47565b905082815260208101848484011115611bcd57611bcc611ae5565b5b611bd8848285611b91565b509392505050565b5f82601f830112611bf457611bf3611ae1565b5b8135611c04848260208601611b9f565b91505092915050565b5f5f5f5f60808587031215611c2557611c2461176d565b5b5f611c3287828801611984565b9450506020611c4387828801611984565b9350506040611c54878288016118d7565b925050606085013567ffffffffffffffff811115611c7557611c74611771565b5b611c8187828801611be0565b91505092959194509250565b5f67ffffffffffffffff821115611ca757611ca6611ae9565b5b611cb082611850565b9050602081019050919050565b5f611ccf611cca84611c8d565b611b47565b905082815260208101848484011115611ceb57611cea611ae5565b5b611cf6848285611b91565b509392505050565b5f82601f830112611d1257611d11611ae1565b5b8135611d22848260208601611cbd565b91505092915050565b5f5f60408385031215611d4157611d4061176d565b5b5f611d4e85828601611984565b925050602083013567ffffffffffffffff811115611d6f57611d6e611771565b5b611d7b85828601611cfe565b9150509250929050565b5f5f60408385031215611d9b57611d9a61176d565b5b5f611da885828601611984565b9250506020611db985828601611984565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611e0757607f821691505b602082108103611e1a57611e19611dc3565b5b50919050565b5f606082019050611e335f830186611946565b611e406020830185611a51565b611e4d6040830184611946565b949350505050565b5f81905092915050565b5f611e6982611828565b611e738185611e55565b9350611e83818560208601611842565b80840191505092915050565b5f611e9a8285611e5f565b9150611ea68284611e5f565b91508190509392505050565b5f81519050919050565b5f82825260208201905092915050565b5f611ed682611eb2565b611ee08185611ebc565b9350611ef0818560208601611842565b611ef981611850565b840191505092915050565b5f608082019050611f175f830187611946565b611f246020830186611946565b611f316040830185611a51565b8181036060830152611f438184611ecc565b905095945050505050565b5f81519050611f5c816117a0565b92915050565b5f60208284031215611f7757611f7661176d565b5b5f611f8484828501611f4e565b91505092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302611fe97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611fae565b611ff38683611fae565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61202e612029612024846118b8565b61200b565b6118b8565b9050919050565b5f819050919050565b61204783612014565b61205b61205382612035565b848454611fba565b825550505050565b5f5f905090565b612072612063565b61207d81848461203e565b505050565b5b818110156120a0576120955f8261206a565b600181019050612083565b5050565b601f8211156120e5576120b681611f8d565b6120bf84611f9f565b810160208510156120ce578190505b6120e26120da85611f9f565b830182612082565b50505b505050565b5f82821c905092915050565b5f6121055f19846008026120ea565b1980831691505092915050565b5f61211d83836120f6565b9150826002028217905092915050565b61213682611828565b67ffffffffffffffff81111561214f5761214e611ae9565b5b6121598254611df0565b6121648282856120a4565b5f60209050601f831160018114612195575f8415612183578287015190505b61218d8582612112565b8655506121f4565b601f1984166121a386611f8d565b5f5b828110156121ca578489015182556001820191506020850194506020810190506121a5565b868310156121e757848901516121e3601f8916826120f6565b8355505b6001600288020188555050505b505050505050565b5f60408201905061220f5f830185611946565b61221c6020830184611a51565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea2646970667358221220f3046d11a7ab967677b72b58b77bbfbd063c9008e6bfeb91dd84e93e8c67137f64736f6c634300081e0033";

      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: erc721Bytecode.substring(0, 5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const appendResponse = await JSONRPCRequest(this, "appendFile", {
        keys: [fileCreateEd25519PublicKey],
        fileId,
        contents: erc721Bytecode.substring(5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(appendResponse.status).to.equal("SUCCESS");

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "2500000",
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#7) Create and deploy a valid contract that uses the Hiero account service system contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const systemContractBytecode =
        "6080604052348015600e575f5ffd5b50610ec38061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c806309d98c59146100595780631c0e502d1461008a57806360626c1a146100bb5780638bce4f7d146100ec578063f83479cb1461011d575b5f5ffd5b610073600480360381019061006e9190610989565b61014e565b6040516100819291906109de565b60405180910390f35b6100a4600480360381019061009f9190610989565b6101c6565b6040516100b2929190610a1f565b60405180910390f35b6100d560048036038101906100d09190610989565b61023e565b6040516100e39291906109de565b60405180910390f35b61010660048036038101906101019190610b82565b6102b6565b604051610114929190610a1f565b60405180910390f35b61013760048036038101906101329190610b82565b610320565b604051610145929190610a1f565b60405180910390f35b5f5f6101598361038a565b80925081935050507fa27cdbf2730224c9c11367703bc63bc3582fadeeb2bc00a48fa5230be0a2e2c482826040516101929291906109de565b60405180910390a1601660030b8260070b141580156101b85750601d60030b8260070b14155b156101c1575f5ffd5b915091565b5f5f6101d1836104a4565b80925081935050507f693ca0ebcfd96a65d10022521651984f4fe4eac5b025d2b76cb38487fbf979c8828260405161020a929190610a1f565b60405180910390a1601660030b8260070b141580156102305750601d60030b8260070b14155b15610239575f5ffd5b915091565b5f5f610249836105c0565b80925081935050507fa27cdbf2730224c9c11367703bc63bc3582fadeeb2bc00a48fa5230be0a2e2c482826040516102829291906109de565b60405180910390a1601660030b8260070b141580156102a85750600f60030b8260070b14155b156102b1575f5ffd5b915091565b5f5f6102c38585856106da565b8092508193505050601660030b8260070b146102dd575f5ffd5b7f162586be4b98b0928c37fb28878bf8924f5dd1eef9de96579d71ead76d8922d282868360405161031093929190610c0a565b60405180910390a1935093915050565b5f5f61032d8585856107fd565b8092508193505050601660030b8260070b14610347575f5ffd5b7f162586be4b98b0928c37fb28878bf8924f5dd1eef9de96579d71ead76d8922d282868360405161037a93929190610c0a565b60405180910390a1935093915050565b5f5f5f5f61016a73ffffffffffffffffffffffffffffffffffffffff1663bbf12d2e60e01b866040516024016103c09190610c3f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161042a9190610caa565b5f604051808303815f865af19150503d805f8114610463576040519150601f19603f3d011682016040523d82523d5f602084013e610468565b606091505b50915091508161047a5760155f61048f565b8080602001905181019061048e9190610d31565b5b8160030b915080945081955050505050915091565b5f5f5f5f61016a73ffffffffffffffffffffffffffffffffffffffff1663308ef30160e01b866040516024016104da9190610c3f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105449190610caa565b5f604051808303815f865af19150503d805f811461057d576040519150601f19603f3d011682016040523d82523d5f602084013e610582565b606091505b5091509150816105945760155f6105ab565b6016818060200190518101906105aa9190610d99565b5b8160030b915080945081955050505050915091565b5f5f5f5f61016a73ffffffffffffffffffffffffffffffffffffffff1663dea3d08160e01b866040516024016105f69190610c3f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516106609190610caa565b5f604051808303815f865af19150503d805f8114610699576040519150601f19603f3d011682016040523d82523d5f602084013e61069e565b606091505b5091509150816106b05760155f6106c5565b808060200190518101906106c49190610d31565b5b8160030b915080945081955050505050915091565b5f5f5f5f61016a73ffffffffffffffffffffffffffffffffffffffff1663b2a31da460e01b88888860405160240161071493929190610e0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161077e9190610caa565b5f604051808303815f865af19150503d805f81146107b7576040519150601f19603f3d011682016040523d82523d5f602084013e6107bc565b606091505b5091509150816107ce5760155f6107e5565b6016818060200190518101906107e49190610d99565b5b8160030b915080945081955050505050935093915050565b5f5f5f5f61016a73ffffffffffffffffffffffffffffffffffffffff1663b252636760e01b88888860405160240161083793929190610e0c565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108a19190610caa565b5f604051808303815f865af19150503d805f81146108da576040519150601f19603f3d011682016040523d82523d5f602084013e6108df565b606091505b5091509150816108f15760155f610906565b808060200190518101906109059190610e4f565b5b8160030b915080945081955050505050935093915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6109588261092f565b9050919050565b6109688161094e565b8114610972575f5ffd5b50565b5f813590506109838161095f565b92915050565b5f6020828403121561099e5761099d610927565b5b5f6109ab84828501610975565b91505092915050565b5f8160070b9050919050565b6109c9816109b4565b82525050565b6109d88161094e565b82525050565b5f6040820190506109f15f8301856109c0565b6109fe60208301846109cf565b9392505050565b5f8115159050919050565b610a1981610a05565b82525050565b5f604082019050610a325f8301856109c0565b610a3f6020830184610a10565b9392505050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610a9482610a4e565b810181811067ffffffffffffffff82111715610ab357610ab2610a5e565b5b80604052505050565b5f610ac561091e565b9050610ad18282610a8b565b919050565b5f67ffffffffffffffff821115610af057610aef610a5e565b5b610af982610a4e565b9050602081019050919050565b828183375f83830152505050565b5f610b26610b2184610ad6565b610abc565b905082815260208101848484011115610b4257610b41610a4a565b5b610b4d848285610b06565b509392505050565b5f82601f830112610b6957610b68610a46565b5b8135610b79848260208601610b14565b91505092915050565b5f5f5f60608486031215610b9957610b98610927565b5b5f610ba686828701610975565b935050602084013567ffffffffffffffff811115610bc757610bc661092b565b5b610bd386828701610b55565b925050604084013567ffffffffffffffff811115610bf457610bf361092b565b5b610c0086828701610b55565b9150509250925092565b5f606082019050610c1d5f8301866109c0565b610c2a60208301856109cf565b610c376040830184610a10565b949350505050565b5f602082019050610c525f8301846109cf565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610c8482610c58565b610c8e8185610c62565b9350610c9e818560208601610c6c565b80840191505092915050565b5f610cb58284610c7a565b915081905092915050565b5f8160030b9050919050565b610cd581610cc0565b8114610cdf575f5ffd5b50565b5f81519050610cf081610ccc565b92915050565b5f610d008261092f565b9050919050565b610d1081610cf6565b8114610d1a575f5ffd5b50565b5f81519050610d2b81610d07565b92915050565b5f5f60408385031215610d4757610d46610927565b5b5f610d5485828601610ce2565b9250506020610d6585828601610d1d565b9150509250929050565b610d7881610a05565b8114610d82575f5ffd5b50565b5f81519050610d9381610d6f565b92915050565b5f60208284031215610dae57610dad610927565b5b5f610dbb84828501610d85565b91505092915050565b5f82825260208201905092915050565b5f610dde82610c58565b610de88185610dc4565b9350610df8818560208601610c6c565b610e0181610a4e565b840191505092915050565b5f606082019050610e1f5f8301866109cf565b8181036020830152610e318185610dd4565b90508181036040830152610e458184610dd4565b9050949350505050565b5f5f60408385031215610e6557610e64610927565b5b5f610e7285828601610ce2565b9250506020610e8385828601610d85565b915050925092905056fea2646970667358221220f5d4b813845f7b86356120f7322adb29afcd0feccbbfd1cb7b71bde325e9fd4464736f6c634300081e0033";
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: systemContractBytecode.substring(0, 5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const appendResponse = await JSONRPCRequest(this, "appendFile", {
        keys: [fileCreateEd25519PublicKey],
        fileId,
        contents: systemContractBytecode.substring(5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(appendResponse.status).to.equal("SUCCESS");

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "1000000",
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#8) Create and deploy a valid contract that uses the Hiero token service system contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const systemContractBytecode =
        "";
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: systemContractBytecode.substring(0, 5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const appendResponse = await JSONRPCRequest(this, "appendFile", {
        keys: [fileCreateEd25519PublicKey],
        fileId,
        contents: systemContractBytecode.substring(5800),
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(appendResponse.status).to.equal("SUCCESS");

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "5500000",
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#9) Create and deploy a valid contract that uses the the Hiero schedule service system contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const systemContractBytecode =
        "6080604052348015600e575f5ffd5b506108408061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063092a105214610038578063fb53b55614610068575b5f5ffd5b610052600480360381019061004d91906103da565b610098565b60405161005f9190610420565b60405180910390f35b610082600480360381019061007d9190610575565b6100f2565b60405161008f9190610420565b60405180910390f35b5f6100a28261014e565b9050601660030b8160070b146100ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100e490610629565b60405180910390fd5b919050565b5f6100fd838361025d565b9050601660030b8160070b14610148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013f90610691565b60405180910390fd5b92915050565b5f5f5f61016b73ffffffffffffffffffffffffffffffffffffffff1663f063796160e01b8560405160240161018391906106be565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516101ed9190610729565b5f604051808303815f865af19150503d805f8114610226576040519150601f19603f3d011682016040523d82523d5f602084013e61022b565b606091505b50915091508161023f57601560030b610254565b808060200190518101906102539190610769565b5b92505050919050565b5f5f5f61016b73ffffffffffffffffffffffffffffffffffffffff1663358eeb0360e01b86866040516024016102949291906107dc565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102fe9190610729565b5f604051808303815f865af19150503d805f8114610337576040519150601f19603f3d011682016040523d82523d5f602084013e61033c565b606091505b50915091508161035057601560030b610365565b808060200190518101906103649190610769565b5b9250505092915050565b5f604051905090565b5f5ffd5b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6103a982610380565b9050919050565b6103b98161039f565b81146103c3575f5ffd5b50565b5f813590506103d4816103b0565b92915050565b5f602082840312156103ef576103ee610378565b5b5f6103fc848285016103c6565b91505092915050565b5f8160070b9050919050565b61041a81610405565b82525050565b5f6020820190506104335f830184610411565b92915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61048782610441565b810181811067ffffffffffffffff821117156104a6576104a5610451565b5b80604052505050565b5f6104b861036f565b90506104c4828261047e565b919050565b5f67ffffffffffffffff8211156104e3576104e2610451565b5b6104ec82610441565b9050602081019050919050565b828183375f83830152505050565b5f610519610514846104c9565b6104af565b9050828152602081018484840111156105355761053461043d565b5b6105408482856104f9565b509392505050565b5f82601f83011261055c5761055b610439565b5b813561056c848260208601610507565b91505092915050565b5f5f6040838503121561058b5761058a610378565b5b5f610598858286016103c6565b925050602083013567ffffffffffffffff8111156105b9576105b861037c565b5b6105c585828601610548565b9150509250929050565b5f82825260208201905092915050565b7f417574686f72697a65207363686564756c65206661696c65642e0000000000005f82015250565b5f610613601a836105cf565b915061061e826105df565b602082019050919050565b5f6020820190508181035f83015261064081610607565b9050919050565b7f5369676e207363686564756c65206661696c65642e00000000000000000000005f82015250565b5f61067b6015836105cf565b915061068682610647565b602082019050919050565b5f6020820190508181035f8301526106a88161066f565b9050919050565b6106b88161039f565b82525050565b5f6020820190506106d15f8301846106af565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610703826106d7565b61070d81856106e1565b935061071d8185602086016106eb565b80840191505092915050565b5f61073482846106f9565b915081905092915050565b61074881610405565b8114610752575f5ffd5b50565b5f815190506107638161073f565b92915050565b5f6020828403121561077e5761077d610378565b5b5f61078b84828501610755565b91505092915050565b5f82825260208201905092915050565b5f6107ae826106d7565b6107b88185610794565b93506107c88185602086016106eb565b6107d181610441565b840191505092915050565b5f6040820190506107ef5f8301856106af565b818103602083015261080181846107a4565b9050939250505056fea2646970667358221220ac0563d807035930d46f46ff24d1c6cf4480367f85bb638710d225c9285bb36a64736f6c634300081e0033";
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: systemContractBytecode,
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "1000000",
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#10) Create and deploy a valid contract that uses the the Hiero exchange rate system contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const systemContractBytecode =
        "608060405234801561000f575f80fd5b506102c88061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80634abd27a314610038578063677feb671461005d575b5f80fd5b61004b610046366004610238565b610070565b60405190815260200160405180910390f35b61004b61006b366004610238565b6100ba565b5f61007a826100f7565b90507f1e2eedf37f019c356cd1ab2a7445bef30fa8b9e32be6636e6efae70244c7b3e0816040516100ad91815260200190565b60405180910390a1919050565b5f6100c482610201565b90507fc399bb30ec076dee6179663a550714898c27a4a8cf23a336b2e49ec777779459816040516100ad91815260200190565b5f805f61016873ffffffffffffffffffffffffffffffffffffffff16632e3cff6a60e01b8560405160240161012e91815260200190565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610199919061024f565b5f604051808303815f865af19150503d805f81146101d2576040519150601f19603f3d011682016040523d82523d5f602084013e6101d7565b606091505b5091509150816101e5575f80fd5b808060200190518101906101f9919061027b565b949350505050565b5f805f61016873ffffffffffffffffffffffffffffffffffffffff166343a8822960e01b8560405160240161012e91815260200190565b5f60208284031215610248575f80fd5b5035919050565b5f82515f5b8181101561026e5760208186018101518583015201610254565b505f920191825250919050565b5f6020828403121561028b575f80fd5b505191905056fea264697066735822122020c2f9bdbf9c77533dcf0e817f4538cd46ba5a1d761e8d01cc311ca4cd2cc7f864736f6c63430008180033";
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: systemContractBytecode,
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "300000",
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#11) Create and deploy a valid contract that uses the the Hiero psuedo random number generator system contract", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );
      const systemContractBytecode =
        "608060405234801561000f575f80fd5b506101fb8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063d83bf9a11461002d575b5f80fd5b610035610047565b60405190815260200160405180910390f35b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663d83bf9a160e01b17905290515f91829182916101699161009a9190610182565b5f604051808303815f865af19150503d805f81146100d3576040519150601f19603f3d011682016040523d82523d5f602084013e6100d8565b606091505b50915091508161012e5760405162461bcd60e51b815260206004820152601760248201527f50524e472073797374656d2063616c6c206661696c6564000000000000000000604482015260640160405180910390fd5b8080602001905181019061014291906101ae565b92507f597d607a3790e8d60862649d1fef7e222a0160226d4648901d47e03c6f056f668360405161017591815260200190565b60405180910390a1505090565b5f82515f5b818110156101a15760208186018101518583015201610187565b505f920191825250919050565b5f602082840312156101be575f80fd5b505191905056fea26469706673582212206f5ba247eaa26eaa11adb607ec6111bfd220b8cea5c2a83990375c7e2d29eef364736f6c63430008180033";
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: systemContractBytecode,
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      const fileId = fileResponse.fileId;

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas: "300000",
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#12) Create and deploy a valid contract and set the payer account that does not have sufficient funds", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: smartContractBytecode,
      });
      const fileId = fileResponse.fileId;

      const payerPrivateKey = await generateEd25519PrivateKey(this);
      const payerAccountId = await createAccount(this, payerPrivateKey);

      await setOperator(this, payerAccountId, payerPrivateKey);

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INSUFFICIENT_PAYER_BALANCE",
          "insufficient balance",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#13) Create and deploy a valid contract and set the file ID to be a system file for exchange rate - 0.0.112", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: "0.0.112",
          gas,
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_FILE_ID", "invalid file id");
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#14) Create and deploy a valid contract and set the file ID to be a deleted file ID", async function () {
      const fileCreateEd25519PrivateKey = await generateEd25519PrivateKey(this);
      const fileCreateEd25519PublicKey = await generateEd25519PublicKey(
        this,
        fileCreateEd25519PrivateKey,
      );

      const createFileResponse = await JSONRPCRequest(this, "createFile", {
        keys: [fileCreateEd25519PublicKey],
        contents: smartContractBytecode,
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });

      const fileId = createFileResponse.fileId;

      const deleteFileResponse = await JSONRPCRequest(this, "deleteFile", {
        fileId,
        commonTransactionParams: {
          signers: [fileCreateEd25519PrivateKey],
        },
      });

      expect(deleteFileResponse.status).to.equal("SUCCESS");

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
        });
      } catch (err: any) {
        assert.equal(err.data.status, "FILE_DELETED", "file deleted");
        return;
      }
      assert.fail("Should throw an error");
    });
  });

  describe("Initcode", function () {
    const gas = "300000";
    it("(#1) Create a contract with valid initcode under the transaction size limit", async function () {
      const initcode = smartContractBytecode;
      const response = await JSONRPCRequest(this, "createContract", {
        initcode,
        gas,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#2) Create a contract with missing initcode AND missing bytecodeFileId", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_FILE_ID",
          "Invalid file id error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#3) Create a contract with both valid initcode and valid bytecodeFileId supplied", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: smartContractBytecode,
      });
      const fileId = fileResponse.fileId;

      const response = await JSONRPCRequest(this, "createContract", {
        initcode: smartContractBytecode,
        bytecodeFileId: fileId,
        gas,
      });

      expect(response.status).to.equal("SUCCESS");
    });

    it("(#4) Create a contract with an invalid initcode hex string", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: "0xZZ",
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    // TODO: needs investigation
    it.skip("(#5) Create a contract with a valid initcode with constructorParameters", async function () {
      const constructorParameters = new ContractFunctionParameters()
        .addUint256(1)
        ._build();

      const initcode =
        "6080604052348015600e575f5ffd5b506040516101493803806101498339818101604052810190602e9190606b565b805f81905550506091565b5f5ffd5b5f819050919050565b604d81603d565b81146056575f5ffd5b50565b5f815190506065816046565b92915050565b5f60208284031215607d57607c6039565b5b5f6088848285016059565b91505092915050565b60ac8061009d5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c80636d619daa14602a575b5f5ffd5b60306044565b604051603b9190605f565b60405180910390f35b5f5481565b5f819050919050565b6059816049565b82525050565b5f60208201905060705f8301846052565b9291505056fea2646970667358221220084a38ba3cab209cd2154230b84b3abc0ef94ea339d088a86544e2c56ffe557564736f6c634300081e0033";

      const response = await JSONRPCRequest(this, "createContract", {
        initcode,
        gas: "300000",
        constructorParameters: toHexString(constructorParameters),
      });
      expect(response.status).to.equal("SUCCESS");

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#6) Create a contract with a valid initcode but insufficient gas", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: smartContractBytecode,
          gas: "0",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INSUFFICIENT_GAS",
          "Insufficient gas error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#7) Create a contract with empty initcode", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: "",
          gas,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_BYTECODE_EMPTY",
          "Contract file empty error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });
  });

  describe("Initial Balance", function () {
    const bytecode =
      "6080604052603e80600f5f395ff3fe60806040525f5ffdfea264697066735822122075befcb607eba7ac26552e70e14ad0b62dc41442ac32e038255f817e635c013164736f6c634300081e0033";
    const gas = "200000";

    this.timeout(30000);

    it("(#1) Create a contract with an admin key and valid initial balance", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      const response = await JSONRPCRequest(this, "createContract", {
        initcode: bytecode,
        gas,
        initialBalance: "1000",
        adminKey: ed25519PublicKey,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);

      // Verify initial balance
      const accountInfo = await consensusInfoClient.getAccountInfo(
        response.contractId,
      );
      expect(accountInfo.balance.toTinybars().toString()).to.equal("1000");
    });

    it("(#2) Create a contract with no admin key and valid initial balance", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        initcode: bytecode,
        gas,
        initialBalance: "1000",
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);

      // Verify initial balance
      const accountInfo = await consensusInfoClient.getAccountInfo(
        response.contractId,
      );
      expect(accountInfo.balance.toTinybars().toString()).to.equal("1000");
    });

    it("(#3) Create a contract with no admin key and with zero initial balance", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        initcode: bytecode,
        gas,
        initialBalance: "0",
      });

      expect(response.status).to.equal("SUCCESS");

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);

      // Verify initial balance
      const accountInfo = await consensusInfoClient.getAccountInfo(
        response.contractId,
      );
      expect(accountInfo.balance.toTinybars().toString()).to.equal("0");
    });

    it("(#4) Create a contract with an admin key and with zero initial balance", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      const response = await JSONRPCRequest(this, "createContract", {
        initcode: bytecode,
        gas,
        initialBalance: "0",
        adminKey: ed25519PublicKey,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);

      // Verify initial balance
      const accountInfo = await consensusInfoClient.getAccountInfo(
        response.contractId,
      );
      expect(accountInfo.balance.toTinybars().toString()).to.equal("0");
    });

    it("(#5) Create a contract with an admin key and negative balance", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "-1000",
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_NEGATIVE_VALUE",
          "Invalid initial balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#6) Create a contract with no admin key and negative balance", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "-1000",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_NEGATIVE_VALUE",
          "Invalid initial balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#7) Create a contract with an admin key and greater than payer balance", async function () {
      const payerAccountPrivateKey = await generateEd25519PrivateKey(this);
      const payerAccountId = await createAccount(this, payerAccountPrivateKey);

      await setOperator(this, payerAccountId, payerAccountPrivateKey);

      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "1000",
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INSUFFICIENT_PAYER_BALANCE",
          "Insufficient payer balance error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#8) Create a contract with no admin key and greater than payer balance", async function () {
      const payerAccountPrivateKey = await generateEd25519PrivateKey(this);
      const payerAccountId = await createAccount(this, payerAccountPrivateKey);

      await setOperator(this, payerAccountId, payerAccountPrivateKey);

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "1000",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INSUFFICIENT_PAYER_BALANCE",
          "Insufficient payer balance error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#9) Create contract with admin key and initial balance = int64 min", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "-9223372036854775808",
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_NEGATIVE_VALUE",
          "Invalid initial balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#10) Create contract without admin key and initial balance = int64 min", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "-9223372036854775808",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_NEGATIVE_VALUE",
          "Invalid initial balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#11) Create contract with admin key and initial balance = int64 min + 1", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "-9223372036854775807",
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_NEGATIVE_VALUE",
          "Invalid initial balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#12) Create contract without admin key and initial balance = int64 min + 1", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "-9223372036854775807",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_NEGATIVE_VALUE",
          "Invalid initial balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#13) Create contract with admin key and initial balance = int64 max - 1", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "9223372036854775807",
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          // TODO: fail invalid
          "FAIL_INVALID",
          "Insufficient payer balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#14) Create contract without admin key and initial balance = int64 max - 1", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "9223372036854775806",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          // TODO fail invalid
          "FAIL_INVALID",
          "Insufficient payer balance error",
        );
        return;
      }
    });

    it("(#15) Create contract with admin key and initial balance = int64 max", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "9223372036854775807",
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          // TODO: fail invalid
          "FAIL_INVALID",
          "Insufficient payer balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#16) Create contract without admin key and initial balance = int64 max", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: bytecode,
          gas,
          initialBalance: "9223372036854775807",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          // TODO: fail invalid
          "FAIL_INVALID",
          "Insufficient payer balance error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });
  });

  describe("Constructor Parameters", function () {
    const gas = "300000";
    const bytecode =
      "6080604052348015600e575f5ffd5b506040516101493803806101498339818101604052810190602e9190606b565b805f81905550506091565b5f5ffd5b5f819050919050565b604d81603d565b81146056575f5ffd5b50565b5f815190506065816046565b92915050565b5f60208284031215607d57607c6039565b5b5f6088848285016059565b91505092915050565b60ac8061009d5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c80636d619daa14602a575b5f5ffd5b60306044565b604051603b9190605f565b60405180910390f35b5f5481565b5f819050919050565b6059816049565b82525050565b5f60208201905060705f8301846052565b9291505056fea2646970667358221220084a38ba3cab209cd2154230b84b3abc0ef94ea339d088a86544e2c56ffe557564736f6c634300081e0033";

    it("(#1) Create contract with admin key and valid ABI‑encoded parameters", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: bytecode,
      });
      const fileId = fileResponse.fileId;
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      const constructorParams = new ContractFunctionParameters()
        .addUint256(1)
        ._build();

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas,
        adminKey: ed25519PublicKey,
        constructorParameters: toHexString(constructorParams),
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#2) Create contract without admin key and valid ABI‑encoded parameters", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: bytecode,
      });
      const fileId = fileResponse.fileId;

      const constructorParams = new ContractFunctionParameters()
        .addUint256(1)
        ._build();

      const response = await JSONRPCRequest(this, "createContract", {
        bytecodeFileId: fileId,
        gas,
        constructorParameters: toHexString(constructorParams),
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#3) Create contract with admin key and invalid hex string", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: bytecode,
      });
      const fileId = fileResponse.fileId;

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
          constructorParameters: "0xZZ",
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#4) Create contract without admin key and invalid hex string", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents: bytecode,
      });
      const fileId = fileResponse.fileId;

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
          constructorParameters: "0xZZ",
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#5) Create contract with admin key and oversized constructor parameters", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents:
          "608060405234801561000f575f5ffd5b506040516101fb3803806101fb833981810160405281019061003191906100d4565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a38261007a565b9050919050565b6100b381610099565b81146100bd575f5ffd5b50565b5f815190506100ce816100aa565b92915050565b5f602082840312156100e9576100e8610076565b5b5f6100f6848285016100c0565b91505092915050565b60f08061010b5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c80636d619daa14602a575b5f5ffd5b60306044565b604051603b919060a3565b60405180910390f35b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f608f826068565b9050919050565b609d816087565b82525050565b5f60208201905060b45f8301846096565b9291505056fea2646970667358221220465e188fcf3a681c75a48154a23316e61ee35f29ee5908e42d53f793acd1f8ef64736f6c634300081e0033",
      });
      const fileId = fileResponse.fileId;

      const constructorParams = "a".repeat(5500);

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
          adminKey: ed25519PublicKey,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
          constructorParameters: constructorParams,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_REVERT_EXECUTED",
          "Contract revert executed error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#6) Create contract without admin key and oversized constructor parameters", async function () {
      const fileResponse = await JSONRPCRequest(this, "createFile", {
        contents:
          "608060405234801561000f575f5ffd5b506040516101fb3803806101fb833981810160405281019061003191906100d4565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100a38261007a565b9050919050565b6100b381610099565b81146100bd575f5ffd5b50565b5f815190506100ce816100aa565b92915050565b5f602082840312156100e9576100e8610076565b5b5f6100f6848285016100c0565b91505092915050565b60f08061010b5f395ff3fe6080604052348015600e575f5ffd5b50600436106026575f3560e01c80636d619daa14602a575b5f5ffd5b60306044565b604051603b919060a3565b60405180910390f35b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f608f826068565b9050919050565b609d816087565b82525050565b5f60208201905060b45f8301846096565b9291505056fea2646970667358221220465e188fcf3a681c75a48154a23316e61ee35f29ee5908e42d53f793acd1f8ef64736f6c634300081e0033",
      });
      const fileId = fileResponse.fileId;

      const constructorParams = "a".repeat(5500);

      try {
        await JSONRPCRequest(this, "createContract", {
          bytecodeFileId: fileId,
          gas,
          constructorParameters: constructorParams,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "CONTRACT_REVERT_EXECUTED",
          "Contract revert executed error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });
  });

  describe.skip("Gas", function () {
    const gas = "300000";
    it("(#1) Creates a contract with admin key and reasonable gas", async function () {
      const ed25519PrivateKey = await generateEd25519PrivateKey(this);
      const ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      const response = await JSONRPCRequest(this, "createContract", {
        initcode: smartContractBytecode,
        gas,
        adminKey: ed25519PublicKey,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#2) Creates a contract with no admin key and reasonable gas", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        initcode: smartContractBytecode,
        gas,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.contractId.toString()).to.equal(response.contractId);
    });

    it("(#3) Creates a contract with zero gas", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: smartContractBytecode,
          gas: "0",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INSUFFICIENT_GAS",
          "Insufficient gas error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#4) Creates a contract with negative gas", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: smartContractBytecode,
          gas: "-1",
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#5) Creates a contract with gas at int64 min", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: smartContractBytecode,
          gas: "-9223372036854775808",
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#6) Creates a contract with gas at int64 min + 1", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          initcode: smartContractBytecode,
          gas: "-9223372036854775807",
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });
  });

  describe("Memo", function () {
    let ed25519PrivateKey: string;
    let ed25519PublicKey: string;
    let commonContractParams: any;

    beforeEach(async function () {
      ed25519PrivateKey = await generateEd25519PrivateKey(this);
      ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      commonContractParams = {
        initcode: smartContractBytecode,
        gas: "300000",
        adminKey: ed25519PublicKey,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      };
    });

    const verifyContractCreationWithMemo = async (
      contractId: string,
      memo: string,
    ) => {
      // Verify memo via consensus node
      const contractInfo =
        await consensusInfoClient.getContractInfo(contractId);
      expect(contractInfo.contractMemo).to.equal(memo);

      // Verify memo via mirror node (with retry for eventual consistency)
      await retryOnError(async () => {
        const mirrorContractInfo =
          await mirrorNodeClient.getContractData(contractId);
        expect(mirrorContractInfo.memo).to.equal(memo);
      });
    };

    it("(#1) Creates a contract with valid memo", async function () {
      const memo = "Test contract memo";

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithMemo(response.contractId, memo);
    });

    it("(#2) Creates a contract with empty memo", async function () {
      const memo = "";

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithMemo(response.contractId, memo);
    });

    it("(#3) Creates a contract with memo at maximum length (100 bytes)", async function () {
      const memo = "a".repeat(100);

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithMemo(response.contractId, memo);
    });

    it("(#4) Creates a contract with memo exceeding maximum length", async function () {
      try {
        const memo = "a".repeat(101);

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          memo,
        });
      } catch (err: any) {
        assert.equal(err.data.status, "MEMO_TOO_LONG", "Memo too long error");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#5) Creates a contract with memo containing null byte", async function () {
      try {
        const memo = "Test\0memo";

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          memo,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_ZERO_BYTE_IN_STRING",
          "Invalid zero byte in string error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#6) Creates a contract with memo containing only whitespace", async function () {
      const memo = "   ";

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithMemo(response.contractId, memo);
    });

    it("(#7) Creates a contract with memo containing special characters", async function () {
      const memo = "!@#$%^&*()_+-=[]{};':\",./<>?";

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithMemo(response.contractId, memo);
    });

    it("(#8) Creates a contract with memo containing unicode characters", async function () {
      const memo = "测试合约备注 🚀";

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithMemo(response.contractId, memo);
    });
  });

  describe("AutoRenewPeriod", function () {
    let ed25519PrivateKey: string;
    let ed25519PublicKey: string;
    let commonContractParams: any;

    beforeEach(async function () {
      ed25519PrivateKey = await generateEd25519PrivateKey(this);
      ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      commonContractParams = {
        initcode: smartContractBytecode,
        gas: "300000",
        adminKey: ed25519PublicKey,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      };
    });

    const verifyContractCreationWithAutoRenewPeriod = async (
      contractId: string,
      expectedAutoRenewPeriod: string,
    ) => {
      // Verify auto renew period via consensus node
      const contractInfo =
        await consensusInfoClient.getContractInfo(contractId);
      expect(contractInfo.autoRenewPeriod?.seconds?.toString()).to.equal(
        expectedAutoRenewPeriod,
      );

      // Verify auto renew period via mirror node (with retry for eventual consistency)
      await retryOnError(async () => {
        const mirrorContractInfo =
          await mirrorNodeClient.getContractData(contractId);
        expect(mirrorContractInfo.auto_renew_period?.toString()).to.equal(
          expectedAutoRenewPeriod,
        );
      });
    };

    it("(#1) Creates a contract with valid auto renew period", async function () {
      const autoRenewPeriod = "7000000";

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        autoRenewPeriod,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAutoRenewPeriod(
        response.contractId,
        autoRenewPeriod,
      );
    });

    it("(#2) Creates a contract with minimum auto renew period", async function () {
      const autoRenewPeriod = "2592000"; // 30 days

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        autoRenewPeriod,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAutoRenewPeriod(
        response.contractId,
        autoRenewPeriod,
      );
    });

    it("(#3) Creates a contract with maximum auto renew period", async function () {
      const autoRenewPeriod = "8000001"; // Maximum valid period

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        autoRenewPeriod,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAutoRenewPeriod(
        response.contractId,
        autoRenewPeriod,
      );
    });

    it("(#4) Creates a contract with auto renew period below minimum", async function () {
      try {
        const autoRenewPeriod = "2591999"; // Below minimum

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          autoRenewPeriod,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "AUTORENEW_DURATION_NOT_IN_RANGE",
          "Auto renew duration below minimum error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#5) Creates a contract with auto renew period above maximum", async function () {
      try {
        const autoRenewPeriod = "300000"; // Above maximum

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          autoRenewPeriod,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "AUTORENEW_DURATION_NOT_IN_RANGE",
          "Auto renew duration above maximum error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#6) Creates a contract with auto renew period of zero", async function () {
      try {
        const autoRenewPeriod = "0";

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          autoRenewPeriod,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_RENEWAL_PERIOD",
          "Invalid renewal period",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#7) Creates a contract with negative auto renew period", async function () {
      try {
        const autoRenewPeriod = "-1";

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          autoRenewPeriod,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_RENEWAL_PERIOD",
          "Invalid renewal period",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#8) Creates a contract with auto renew period of int64 max", async function () {
      try {
        const autoRenewPeriod = "9223372036854775807"; // int64 max

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          autoRenewPeriod,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_RENEWAL_PERIOD",
          "Auto renew duration int64 max error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#9) Creates a contract with auto renew period of int64 min", async function () {
      try {
        const autoRenewPeriod = "-9223372036854775808"; // int64 min

        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          autoRenewPeriod,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_RENEWAL_PERIOD",
          "Invalid renewal period",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#10) Creates a contract without auto renew period", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        memo: "Contract without auto renew period",
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify the default auto renew period is applied
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      const defaultAutoRenewPeriod =
        contractInfo.autoRenewPeriod?.seconds?.toString();

      // Verify via mirror node
      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.auto_renew_period?.toString()).to.equal(
          defaultAutoRenewPeriod,
        );
      });
    });
  });

  describe("AutoRenewAccountId", function () {
    const verifyContractCreationWithAutoRenewAccount = async (
      contractId: string,
      expectedAutoRenewAccount: string | null,
    ) => {
      // Verify auto renew account via consensus node
      const contractInfo =
        await consensusInfoClient.getContractInfo(contractId);

      if (expectedAutoRenewAccount === null) {
        expect(contractInfo.autoRenewAccountId).to.be.null;
      } else {
        expect(contractInfo.autoRenewAccountId?.toString()).to.equal(
          expectedAutoRenewAccount,
        );
      }

      // Verify auto renew account via mirror node
      await retryOnError(async () => {
        const mirrorContractInfo =
          await mirrorNodeClient.getContractData(contractId);
        if (expectedAutoRenewAccount === null) {
          expect(mirrorContractInfo.auto_renew_account).to.be.null;
        } else {
          expect(mirrorContractInfo.auto_renew_account?.toString()).to.equal(
            expectedAutoRenewAccount,
          );
        }
      });
    };

    it("(#1) Creates a contract with valid auto renew account", async function () {
      const initcode = smartContractBytecode;

      // Create an account to use as auto renew account
      const autoRenewAccountPrivateKey = await generateEd25519PrivateKey(this);
      const autoRenewAccountId = await createAccount(
        this,
        autoRenewAccountPrivateKey,
      );

      const response = await JSONRPCRequest(this, "createContract", {
        initcode,
        autoRenewAccountId,
        gas: "300000",
        commonTransactionParams: {
          signers: [autoRenewAccountPrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAutoRenewAccount(
        response.contractId,
        autoRenewAccountId,
      );
    });

    it("(#2) Creates a contract with non-existent auto renew account", async function () {
      try {
        const initcode = smartContractBytecode;

        await JSONRPCRequest(this, "createContract", {
          initcode,
          autoRenewAccountId: "0.0.999999", // Non-existent account
          gas: "300000",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_AUTORENEW_ACCOUNT",
          "Invalid auto renew account error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#3) Creates a contract with deleted auto renew account", async function () {
      const initcode = smartContractBytecode;

      // Create an account and then delete it
      const accountPrivateKey = await generateEd25519PrivateKey(this);
      const deletedAccountId = await createAccount(this, accountPrivateKey);

      // Delete the account
      await JSONRPCRequest(this, "deleteAccount", {
        deleteAccountId: deletedAccountId,
        transferAccountId: process.env.OPERATOR_ACCOUNT_ID,
        commonTransactionParams: {
          signers: [accountPrivateKey],
        },
      });

      try {
        await JSONRPCRequest(this, "createContract", {
          initcode,
          autoRenewAccountId: deletedAccountId,
          gas: "300000",
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_SIGNATURE",
          "Invalid signature error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#4) Creates a contract with no auto renew account", async function () {
      const initcode = smartContractBytecode;

      const response = await JSONRPCRequest(this, "createContract", {
        initcode,
        gas: "300000",
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
    });

    it("(#5) Creates a contract with invalid auto renew account format", async function () {
      try {
        const initcode = smartContractBytecode;

        await JSONRPCRequest(this, "createContract", {
          initcode,
          autoRenewAccountId: "invalid", // Invalid format
          gas: "300000",
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });
  });

  describe("DeclineStakingReward", function () {
    let ed25519PrivateKey: string;
    let ed25519PublicKey: string;
    let commonContractParams: any;

    beforeEach(async function () {
      ed25519PrivateKey = await generateEd25519PrivateKey(this);
      ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      commonContractParams = {
        initcode: smartContractBytecode,
        gas: "300000",
      };
    });

    it("(#1) Create a contract with an admin key that decline staking rewards", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        declineStakingReward: true,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      // Verify contract was created successfully
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );

      expect(contractInfo.stakingInfo?.declineStakingReward).to.equal(true);
    });

    it("(#2) Create a contract with no admin key that decline staking rewards", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        declineStakingReward: true,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.stakingInfo?.declineStakingReward).to.equal(true);
    });

    it("(#3) Create a contract with an admin key that that accept staking rewards", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        declineStakingReward: false,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.stakingInfo?.declineStakingReward).to.equal(false);
    });

    it("(#4) Create a contract with no admin key that accept staking rewards", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        declineStakingReward: false,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.stakingInfo?.declineStakingReward).to.equal(false);
    });
  });

  describe("MaxAutomaticTokenAssociations", function () {
    let ed25519PrivateKey: string;
    let ed25519PublicKey: string;
    let commonContractParams: any;

    beforeEach(async function () {
      ed25519PrivateKey = await generateEd25519PrivateKey(this);
      ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      commonContractParams = {
        initcode: smartContractBytecode,
        gas: "300000",
      };
    });

    it("(#1) Create contract with admin key and maxAutomaticTokenAssociations = 0", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        maxAutomaticTokenAssociations: 0,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(0);

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(0);
      });
    });

    it("(#2) Create contract without admin key and maxAutomaticTokenAssociations = 0", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        maxAutomaticTokenAssociations: 0,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(0);

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(0);
      });
    });

    it("(#3) Create contract with admin key and maxAutomaticTokenAssociations = 10", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        maxAutomaticTokenAssociations: 10,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(
        10,
      );

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(
          10,
        );
      });
    });

    it("(#4) Create contract without admin key and maxAutomaticTokenAssociations = 10", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        maxAutomaticTokenAssociations: 10,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(
        10,
      );

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(
          10,
        );
      });
    });

    it("(#5) Create contract with admin key and maxAutomaticTokenAssociations = 1000", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        maxAutomaticTokenAssociations: 1000,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(
        1000,
      );

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(
          1000,
        );
      });
    });

    it("(#6) Create contract without admin key and maxAutomaticTokenAssociations = 1000", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        maxAutomaticTokenAssociations: 1000,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(
        1000,
      );

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(
          1000,
        );
      });
    });

    it("(#7) Create contract with admin key and maxAutomaticTokenAssociations = -1 (no-limit per HIP-904)", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        maxAutomaticTokenAssociations: -1,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(
        -1,
      );

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(
          -1,
        );
      });
    });

    it("(#8) Create contract without admin key and maxAutomaticTokenAssociations = -1 (no-limit per HIP-904)", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        maxAutomaticTokenAssociations: -1,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(
        -1,
      );

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(
          -1,
        );
      });
    });

    it("(#9) Create contract with admin key and invalid negative maxAutomaticTokenAssociations = -2", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          maxAutomaticTokenAssociations: -2,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_MAX_AUTO_ASSOCIATIONS",
          "Invalid max auto associations error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#10) Create contract without admin key and invalid negative maxAutomaticTokenAssociations = -2", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          maxAutomaticTokenAssociations: -2,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_MAX_AUTO_ASSOCIATIONS",
          "Invalid max auto associations error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#11) Create contract with admin key and maxAutomaticTokenAssociations equal to used_auto_associations (3)", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        maxAutomaticTokenAssociations: 3,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(3);

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(3);
      });
    });

    it("(#12) Create contract without admin key and maxAutomaticTokenAssociations equal to used_auto_associations", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        maxAutomaticTokenAssociations: 3,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(3);

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(3);
      });
    });

    it("(#13) Create contract with admin key and maxAutomaticTokenAssociations < used_auto_associations (1 < 3)", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        maxAutomaticTokenAssociations: 1,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(1);

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(1);
      });
    });

    it("(#14) Create contract without admin key and maxAutomaticTokenAssociations < used_auto_associations (1 < 3)", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        maxAutomaticTokenAssociations: 1,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      const contractInfo = await consensusInfoClient.getContractInfo(
        response.contractId,
      );
      expect(contractInfo.maxAutomaticTokenAssociations.toNumber()).to.equal(1);

      await retryOnError(async () => {
        const mirrorContractInfo = await mirrorNodeClient.getContractData(
          response.contractId,
        );
        expect(mirrorContractInfo.max_automatic_token_associations).to.equal(1);
      });
    });

    it("(#15) Create contract without admin key and maxAutomaticTokenAssociations = 2,147,483,647", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          maxAutomaticTokenAssociations: 2147483647,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT",
          "Requested num automatic associations exceeds association limit error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#16) Create contract with admin key and maxAutomaticTokenAssociations = 2,147,483,647", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          maxAutomaticTokenAssociations: 2147483647,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "REQUESTED_NUM_AUTOMATIC_ASSOCIATIONS_EXCEEDS_ASSOCIATION_LIMIT",
          "Requested num automatic associations exceeds association limit error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#17) Create contract without admin key and maxAutomaticTokenAssociations = -2,147,483,647", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          maxAutomaticTokenAssociations: -2147483647,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_MAX_AUTO_ASSOCIATIONS",
          "Invalid max auto associations error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#18) Create contract with admin key and maxAutomaticTokenAssociations = -2,147,483,647", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          maxAutomaticTokenAssociations: -2147483647,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_MAX_AUTO_ASSOCIATIONS",
          "Invalid max auto associations error",
        );
        return;
      }

      assert.fail("Should throw an error");
    });
  });

  describe("Admin Key", function () {
    let ed25519PrivateKey: string;
    let ed25519PublicKey: string;
    let commonContractParamsBase: any;

    beforeEach(async function () {
      ed25519PrivateKey = await generateEd25519PrivateKey(this);
      ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      commonContractParamsBase = {
        initcode: smartContractBytecode,
        gas: "300000",
      };
    });

    const verifyContractCreationWithAdminKey = async (
      contractId: string,
      adminKey: string | null,
    ) => {
      if (adminKey === null) {
        await verifyContractUpdateWithNullKey(contractId, "adminKey");
      } else {
        await verifyContractKey(contractId, adminKey, "adminKey");
      }
    };

    it("(#1) Create a contract with a valid ED25519 public key as its admin key", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: ed25519PublicKey,
        commonTransactionParams: { signers: [ed25519PrivateKey] },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAdminKey(
        response.contractId,
        ed25519PublicKey,
      );
    });

    it("(#2) Create a contract with a valid ECDSA key as its admin key", async function () {
      const ecdsaPriv = await generateEcdsaSecp256k1PrivateKey(this);
      const ecdsaPub = await generateEcdsaSecp256k1PublicKey(this, ecdsaPriv);

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: ecdsaPub,
        commonTransactionParams: { signers: [ecdsaPriv] },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAdminKey(response.contractId, ecdsaPub);
    });

    it("(#3) Create a contract with an invalid key format", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParamsBase,
          adminKey: invalidKey,
        });
      } catch (err: any) {
        // SDK error (invalid key encoding)
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it.skip("(#4) Create a contract with no adminKey", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
      });
      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      await verifyContractCreationWithAdminKey(response.contractId, null);
    });

    it("(#5) Create a contract with an admin key too large (invalid)", async function () {
      // Reuse invalidKey as an oversized/invalid-encoded key sample
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParamsBase,
          adminKey: invalidKey + invalidKey, // force oversize
        });
      } catch (err: any) {
        assert.equal(
          err.code,
          ErrorStatusCodes.INTERNAL_ERROR,
          "Internal error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });

    it("(#6) Create a contract with an ED25519 complex admin key structure (KeyList)", async function () {
      const keyList = await generateKeyList(this, {
        type: "keyList",
        keys: [
          { type: "ed25519PublicKey" },
          { type: "ed25519PublicKey" },
          { type: "ed25519PublicKey" },
        ],
      });

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: keyList.key,
        commonTransactionParams: { signers: keyList.privateKeys },
      });
      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractKeyList(response.contractId, keyList.key, "adminKey");
    });

    it("(#7) Create a contract with an ECDSA complex admin key structure (KeyList)", async function () {
      const keyList = await generateKeyList(this, {
        type: "keyList",
        keys: [
          { type: "ecdsaSecp256k1PublicKey" },
          { type: "ecdsaSecp256k1PublicKey" },
          { type: "ecdsaSecp256k1PublicKey" },
        ],
      });

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: keyList.key,
        commonTransactionParams: { signers: keyList.privateKeys },
      });
      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractKeyList(response.contractId, keyList.key, "adminKey");
    });

    it("(#8) Create a contract with an ED25519 private key as the admin key", async function () {
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: ed25519PrivateKey,
        commonTransactionParams: { signers: [ed25519PrivateKey] },
      });
      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAdminKey(
        response.contractId,
        ed25519PublicKey,
      );
    });

    it("(#9) Create a contract with an ECDSA private key as the admin key", async function () {
      const ecdsaPriv = await generateEcdsaSecp256k1PrivateKey(this);
      const ecdsaPub = await generateEcdsaSecp256k1PublicKey(this, ecdsaPriv);
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: ecdsaPriv,
        commonTransactionParams: { signers: [ecdsaPriv] },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractCreationWithAdminKey(response.contractId, ecdsaPub);
    });

    it("(#10) Create a contract with valid KeyList of ED25519 and ECDSAsecp256k1 private and public keys as its admin key", async function () {
      const keyList = await generateKeyList(this, {
        type: "keyList",
        keys: [
          { type: "ed25519PublicKey" },
          { type: "ecdsaSecp256k1PublicKey" },
          { type: "ecdsaSecp256k1PrivateKey" },
        ],
      });

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: keyList.key,
        commonTransactionParams: { signers: keyList.privateKeys },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractKeyList(response.contractId, keyList.key, "adminKey");
    });

    it("(#11) Create a contract with a valid ThresholdKey of ED25519 and ECDSAsecp256k1 private and public keys as its admin key", async function () {
      const thresholdKey = await generateKeyList(this, {
        type: "thresholdKey",
        threshold: 2,
        keys: [
          { type: "ed25519PublicKey" },
          { type: "ecdsaSecp256k1PublicKey" },
          { type: "ecdsaSecp256k1PrivateKey" },
        ],
      });

      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParamsBase,
        adminKey: thresholdKey.key,
        commonTransactionParams: { signers: thresholdKey.privateKeys },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;
      await verifyContractKeyList(
        response.contractId,
        thresholdKey.key,
        "adminKey",
      );
    });

    it("(#12) Create a contract with a valid key as the admin key but do not sign with it", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParamsBase,
          adminKey: ed25519PublicKey,
        });
      } catch (err: any) {
        assert.equal(
          err.data.status,
          "INVALID_SIGNATURE",
          "Invalid signature error",
        );
        return;
      }
      assert.fail("Should throw an error");
    });
  });

  describe("Staked Account/Node ID", function () {
    let ed25519PrivateKey: string;
    let ed25519PublicKey: string;
    let commonContractParams: any;

    beforeEach(async function () {
      ed25519PrivateKey = await generateEd25519PrivateKey(this);
      ed25519PublicKey = await generateEd25519PublicKey(
        this,
        ed25519PrivateKey,
      );

      commonContractParams = {
        initcode: smartContractBytecode,
        gas: "300000",
      };
    });

    const verifyContractCreationWithStakedAccountId = async (
      contractId: string,
      stakedAccountId: string,
    ) => {
      // Verify via consensus node
      const contractInfo =
        await consensusInfoClient.getContractInfo(contractId);
      expect(contractInfo.stakingInfo?.stakedAccountId?.toString()).to.equal(
        stakedAccountId,
      );
    };

    const verifyContractCreationWithStakedNodeId = async (
      contractId: string,
      stakedNodeId: string,
    ) => {
      // Verify via consensus node
      const contractInfo =
        await consensusInfoClient.getContractInfo(contractId);
      expect(contractInfo.stakingInfo?.stakedNodeId?.toString()).to.equal(
        stakedNodeId,
      );
    };

    it("(#1) Create a contract that does not have an admin key and is staked to valid account ID", async function () {
      const stakedAccountId = process.env.OPERATOR_ACCOUNT_ID as string;
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        stakedAccountId,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      await verifyContractCreationWithStakedAccountId(
        response.contractId,
        stakedAccountId,
      );
    });

    it("(#2) Create a contract that does not have an admin key and staked to valid node ID", async function () {
      //not sure if this is valid
      const stakedNodeId = "0";
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        stakedNodeId,
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      await verifyContractCreationWithStakedNodeId(
        response.contractId,
        stakedNodeId,
      );
    });

    it("(#3) Create a contract that does not have an admin key and that has an invalid stakedAccountId", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          stakedAccountId: "0.0.99999",
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_STAKING_ID");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#4) Create a contract that does not have an admin key and has an invalid stakedNodeId", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          stakedNodeId: "9999999",
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_STAKING_ID");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#5) Create a contract that does not have an admin key and that tries to set both stakedAccountId and stakedNodeId present", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          stakedAccountId: process.env.OPERATOR_ACCOUNT_ID,
          stakedNodeId: "0",
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_STAKING_ID");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#6) Create a contract that does have an admin key and is staked to valid account ID", async function () {
      const stakedAccountId = process.env.OPERATOR_ACCOUNT_ID as string;
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        stakedAccountId,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      await verifyContractCreationWithStakedAccountId(
        response.contractId,
        stakedAccountId,
      );
    });

    it("(#7) Create a contract that does have an admin key and staked to valid node ID", async function () {
      const stakedNodeId = "0";
      const response = await JSONRPCRequest(this, "createContract", {
        ...commonContractParams,
        adminKey: ed25519PublicKey,
        stakedNodeId,
        commonTransactionParams: {
          signers: [ed25519PrivateKey],
        },
      });

      expect(response.status).to.equal("SUCCESS");
      expect(response.contractId).to.not.be.null;

      await verifyContractCreationWithStakedNodeId(
        response.contractId,
        stakedNodeId,
      );
    });

    it("(#8) Create a contract that does have an admin key and that has an invalid stakedAccountId", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          stakedAccountId: "0.0.99999",
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_STAKING_ID");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#9) Create a contract that does have an admin key and has an invalid stakedNodeId", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          stakedNodeId: "9999999",
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_STAKING_ID");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#10) Create a contract that does have an admin key and that tries to set both stakedAccountId and stakedNodeId present", async function () {
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          stakedAccountId: process.env.OPERATOR_ACCOUNT_ID,
          stakedNodeId: "0",
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        assert.equal(err.data.status, "INVALID_STAKING_ID");
        return;
      }

      assert.fail("Should throw an error");
    });

    it("(#11) Create a contract that does have an admin key and that tries to stake to a deleted account ID", async function () {
      // First, create a test account that we can delete
      const testAccountKey = await generateEd25519PrivateKey(this);
      const testAccount = await JSONRPCRequest(this, "createAccount", {
        key: testAccountKey,
        initialBalance: "100000000", // 1 HBAR
      });

      // Delete the test account
      await JSONRPCRequest(this, "deleteAccount", {
        deleteAccountId: testAccount.accountId,
        transferAccountId: process.env.OPERATOR_ACCOUNT_ID,
        commonTransactionParams: {
          signers: [testAccountKey],
        },
      });

      // Wait a moment for the deletion to propagate
      await new Promise((resolve) => setTimeout(resolve, 3000));

      // Now try to create a contract staked to the deleted account
      try {
        await JSONRPCRequest(this, "createContract", {
          ...commonContractParams,
          adminKey: ed25519PublicKey,
          stakedAccountId: testAccount.accountId,
          commonTransactionParams: {
            signers: [ed25519PrivateKey],
          },
        });
      } catch (err: any) {
        // Should fail with an appropriate error
        assert.isTrue(
          err.data.status === "INVALID_STAKING_ID" ||
            err.data.status === "ACCOUNT_DELETED" ||
            err.data.status.includes("STAKING"),
          `Expected staking/deletion error, got: ${err.data.status}`,
        );
        return;
      }

      assert.fail("Should throw an error");
    });
  });
});
