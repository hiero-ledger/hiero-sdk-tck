# SPDX-License-Identifier: Apache-2.0
name: "System Compatibility"
on:
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag, or SHA to checkout:"
        required: false
        type: string
      custom-job-name:
        description: "The custom job name to use for the job:"
        required: false
        type: string
    secrets:
      access-token:
        description: "GitHub Access Token with write permissions to the repository."
        required: true

defaults:
  run:
    shell: bash

permissions:
  checks: write
  contents: read
  actions: write
  statuses: write

env:
  SOLO_CLUSTER_NAME: "solo-tck-e2e"
  SOLO_NAMESPACE: "solo-tck-e2e"
  SOLO_DEPLOYMENT: "solo-tck-deployment"
  SOLO_CLUSTER_SETUP_NAMESPACE: "solo-setup"
  CONSENSUS_NODE_VERSION: "v0.61.4"

jobs:
  # Execute TCK Regression Tests using specified version of hiero-consensus-node
  tck-regression:
    name: ${{ inputs.custom-job-name || 'Standard' }}
    runs-on: hiero-client-sdk-linux-large
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Checkout the current TCK repository
      - name: Checkout TCK Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Checkout the JS-SDK server
      - name: Checkout JS-SDK Server
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: sdk-server
          repository: hiero-ledger/hiero-sdk-js
          fetch-depth: 0
          fetch-tags: true

      - name: Checkout Latest Tag (JS-SDK)
        run: |
          cd sdk-server
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "Latest JS-SDK tag: $LATEST_TAG"
          git checkout $LATEST_TAG

      # Set up the node environment
      # Version 20.18.0 is the recommended version for solo.
      - name: Setup NodeJS Environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 20.18.0

      - name: Setup PNPM
        run: |
          npm install -g pnpm

      # Set up the npm dependencies and cache on the tck-client
      - name: Set up the tck-client
        run: |
          npm cache clean --force
          npm install

      # Set up the npm dependencies and cache on the sdk-server
      - name: Install NodeJS Dependencies (sdk-server)
        id: start-sdk-server
        run: |
          # Extract package versions from the parent package.json
          SDK_VERSION=$(node -e "console.log(require('../package.json').version)")
          LONG_VERSION=$(node -e "console.log(require('../package.json').dependencies.long)")
          PROTO_VERSION=$(node -e "console.log(require('../package.json').dependencies['@hashgraph/proto'])")

          echo "Using SDK version: $SDK_VERSION"
          echo "Using long version: $LONG_VERSION"
          echo "Using proto version: $PROTO_VERSION"

          # Install with the extracted versions
          pnpm add @hashgraph/sdk@^${SDK_VERSION} long@${LONG_VERSION} @hashgraph/proto@${PROTO_VERSION}
          pnpm install
          nohup pnpm start &
          server_pid=$!
          echo "pid=${server_pid}" >> "${GITHUB_OUTPUT}"
        working-directory: sdk-server/tck

      # Prepare Hiero Solo
      - name: Prepare Hiero Solo
        id: solo
        uses: hiero-ledger/hiero-solo-action@10ec96a107b8d2f5cd26b3e7ab47e65407b5c462 # v0.11.0
        with:
          installMirrorNode: true
          hieroVersion: ${{ env.CONSENSUS_NODE_VERSION }}
          mirrorNodeVersion: v0.134.0

      # Start the TCK client
      - name: Start tck-client
        env:
          OPERATOR_ACCOUNT_ID: "0.0.2"
          OPERATOR_ACCOUNT_PRIVATE_KEY: "302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137"
          JSON_RPC_SERVER_URL: "http://127.0.0.1:8544"
          NODE_IP: "127.0.0.1:50211"
          MIRROR_NODE_REST_URL: "http://127.0.0.1:5551"
          MIRROR_NODE_REST_JAVA_URL: "http://127.0.0.1:8084"
        run: npm run test

      # Stop the TCK server
      - name: Stop tck-server
        if: ${{ always() }}
        run: |
          echo ${{ steps.start-sdk-server.outputs.pid }}
          kill -9 ${{ steps.start-sdk-server.outputs.pid }}