# SPDX-License-Identifier: Apache-2.0
name: "System Compatibility (GO SDK)"

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      custom-job-name:
        description: "The custom job name to use for the job(could include the version of the SDK, Solo, and consensus node):"
        required: false
        type: string
      solo-version:
        description: "The version of the Solo to use(defaults to 0.38.0 if not specified):"
        required: false
        type: string
      consensus-node-version:
        description: "The version of the consensus node to use (defaults to latest stable version tag if not specified):"
        required: false
        type: string
      go-sdk-version:
        description: "The version of the GO SDK to use (defaults to latest tag if not specified):"
        required: false
        type: string
  workflow_call:
    inputs:
      custom-job-name:
        description: "The custom job name to use for the job"
        required: false
        type: string
      solo-version:
        description: "The version of the Solo to use"
        required: false
        type: string
      consensus-node-version:
        description: "The version of the consensus node to use"
        required: false
        type: string
      go-sdk-version:
        description: "The version of the GO SDK to use"
        required: false
        type: string

defaults:
  run:
    shell: bash

jobs:
  # Execute TCK Regression Tests using specified version of hiero-consensus-node
  tck-regression:
    name: ${{ inputs.custom-job-name || 'System Compatibility' }}
    runs-on: hiero-client-sdk-linux-large
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      # Checkout the current TCK repository
      - name: Checkout TCK Repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: tck

      # Checkout the GO SDK server
      - name: Checkout GO SDK Server
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: sdk-server
          repository: hiero-ledger/hiero-sdk-go
          fetch-depth: 0
          fetch-tags: true
          submodules: true

      - name: Checkout GO SDK Version
        run: |
          cd sdk-server
          if [ -n "${{ inputs.go-sdk-version }}" ]; then
            echo "Using specified GO SDK version: ${{ inputs.go-sdk-version }}"
            git checkout ${{ inputs.go-sdk-version }}
          else
            echo "Using latest GO SDK tag"
            git fetch --tags
            LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
            echo "Latest GO SDK tag: $LATEST_TAG"
            git checkout $LATEST_TAG
          fi

      - name: Setup GCC
        run: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends gcc libc6-dev libc-dev

      - name: Set up Go 1.24
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
            go-version: "1.24"
        id: go

      # Set up the node environment
      - name: Setup NodeJS Environment
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
            node-version: 22

      # Set up the npm dependencies and cache on the tck-client
      - name: Set up the tck-client
        run: |
            npm cache clean --force
            npm install
        working-directory: tck

      # Set up and start the TCK server
      - name: Build and Start SDK Server
        id: start-sdk-server
        run: |
          go mod tidy
          go build -v ./...
          go run cmd/server.go &
          server_pid=$!
          echo "pid=${server_pid}" >> "${GITHUB_OUTPUT}"
        working-directory: sdk-server/tck

      # Get Latest Consensus Node Version
      - name: Get Latest Consensus Node Version
        if: ${{ !inputs.consensus-node-version }}
        id: get-consensus-version
        run: |
          # Fetch latest stable version (excludes RC, beta, alpha versions)
          LATEST_TAG=$(git ls-remote --tags --refs https://github.com/hiero-ledger/hiero-consensus-node \
            | awk '{print $2}' \
            | sed 's|refs/tags/||' \
            | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' \
            | sort -V \
            | tail -n1)
          echo "Latest consensus node tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      # Prepare Hiero Solo
      - name: Prepare Hiero Solo
        id: solo
        uses: hiero-ledger/hiero-solo-action@e5750b408bb6c443e59eb10a9d95da918cf9e4c9 # v0.12.0
        with:
          installMirrorNode: true
          soloVersion: ${{ inputs.solo-version || '0.38.0' }}
          mirrorNodeVersion: v0.168.0
          hieroVersion: ${{ inputs.consensus-node-version || steps.get-consensus-version.outputs.tag }}

       # Start the TCK client
      - name: Start tck-client
        env:
          OPERATOR_ACCOUNT_ID: "0.0.2"
          OPERATOR_ACCOUNT_PRIVATE_KEY: "302e020100300506032b65700422042091132178e72057a1d7528025956fe39b0b847f200ab59b2fdd367017f3087137"
          JSON_RPC_SERVER_URL: "http://127.0.0.1:8544"
          NODE_IP: "127.0.0.1:50211"
          MIRROR_NODE_REST_URL: "http://127.0.0.1:5551"
          MIRROR_NODE_REST_JAVA_URL: "http://127.0.0.1:8084"
          NODE_TIMEOUT: "30000"
          MIRROR_NETWORK: "127.0.0.1:5600"
          NODE_ACCOUNT_ID: "0.0.3"
        run: |
          npm run test
        working-directory: tck

      # Stop the TCK server
      - name: Stop tck-server
        if: ${{ always() }}
        run: |
          echo ${{ steps.start-sdk-server.outputs.pid }}
          kill -9 ${{ steps.start-sdk-server.outputs.pid }}
